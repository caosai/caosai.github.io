<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Courage Me]]></title>
  <subtitle><![CDATA[Talk is cheap,show me the code!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-07-01T15:50:02.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Cao Sai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java中按行写文件的方法]]></title>
    <link href="http://yoursite.com/2015/07/01/Java%E4%B8%AD%E6%8C%89%E8%A1%8C%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2015/07/01/Java中按行写文件的方法/</id>
    <published>2015-07-01T14:37:09.000Z</published>
    <updated>2015-07-01T15:50:02.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章总结了使用相关类写文件的操作</p>
<h2 id="1-_FileOutputStream">1. FileOutputStream</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> writeFile1() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="keyword">File</span> fout = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"out.txt"</span>);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</span><br><span class="line">		BufferedWriter br = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(fos));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				br.<span class="keyword">write</span>(<span class="string">"test"</span>);</span><br><span class="line">				br.newLine();</span><br><span class="line">		&#125;</span><br><span class="line">		br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子中用了FileOutputStream,你可以使用FileWriter或者PrintWriter代替处理txt格式的文件操作</p>
<h2 id="2-_FileWriter">2. FileWriter</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">writeFile2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				fw.write(<span class="string">"something"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-_PrintWriter">3. PrintWriter</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">writeFile3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				pw.write(<span class="string">"something"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		pw.close();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-_OutputStreamWriter">4. OutputStreamWriter</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> writeFile4() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="keyword">File</span> fout = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"out.txt"</span>);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</span><br><span class="line">		OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				osw.<span class="keyword">write</span>(<span class="string">"something"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-_它们的区别">5. 它们的区别</h2><p>来自Java Doc</p>
<blockquote>
<p>FileWriter是写入字符文件的工具类。该类的构造函数假设默认的字符编码和默认的字节缓冲区大小是可以接受的。<br>如果需要自定义这些参数值，通过构建一个OutputStreamWriter基于FileOutputStream。</p>
<p>PrintWriter打印格式化的对象表示通过文本输出流。<br>这个类实现了所有被创建在PrintWriter中的方法。它不包含写原始字节的方法，因此程序应该使用未编码的字节流。</p>
</blockquote>
<p>主要的区别是，PrintWriter提供格式如println和printf一些额外的方法。此外，FileWriter会抛出异常以防任何一种I/O失败。<br>PrintWriter方法不抛出IOException，它们设置一个可使用checkerror()获得的boolean型flag位。PrintWriter在每个被写入的数据字节后自动调用flush。涉及到FileWriter，调用者需要注意使用flush。</p>
<p><a href="http://www.programcreek.com/2011/03/java-write-to-a-file-code-example/" target="_blank" rel="external">原文链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章总结了使用相关类写文件的操作</p>
<h2 id="1-_FileOutputStream">1. FileOutputStream</h2><figure class="highlight gradle"><table><tr><td class="gutter]]>
    </summary>
    
      <category term="writeFile" scheme="http://yoursite.com/tags/writeFile/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中按行读取文件的方法]]></title>
    <link href="http://yoursite.com/2015/07/01/Java%E4%B8%AD%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2015/07/01/Java中按行读取文件的方法/</id>
    <published>2015-06-30T16:06:29.000Z</published>
    <updated>2015-06-30T16:10:02.000Z</updated>
    <content type="html"><![CDATA[<p>Java I/O的总的类的数量很多，所以很容糊涂什么时候用哪一种。下面有两个方法介绍按行读取文件的操作。</p>
<h2 id="方法一：">方法一：</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> readFile1(File fin) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(fin);</span><br><span class="line">	<span class="comment">//Construct BufferedReader from InputStreamReader</span></span><br><span class="line">	<span class="keyword">BufferedReader</span> br = <span class="keyword">new</span> BufferReader(<span class="keyword">new</span> InputStreamReader(fis));</span><br><span class="line">	<span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">while</span>((<span class="built_in">line</span> = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">		System.out.<span class="built_in">print</span>(<span class="built_in">line</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二：">方法二：</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> readFile2(File fin) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">// Construct BufferedReader from FileReader</span></span><br><span class="line">	BufferedRead br =<span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> FileReader(fis));</span><br><span class="line">	<span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</span><br><span class="line">	While((<span class="built_in">line</span> = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="built_in">line</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下面的代码取文件路径">下面的代码取文件路径</h2><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">use</span> . <span class="keyword">to</span> get current directory</span><br><span class="line"><span class="keyword">File</span> dir = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">File</span> fin = <span class="keyword">new</span> <span class="keyword">File</span>(dir.getCanonicalPath() + <span class="keyword">File</span>.separator + <span class="string">"in.txt"</span>);</span><br><span class="line">readFile1(fin);</span><br><span class="line">readFile2(fin);</span><br></pre></td></tr></table></figure>
<p>这两个例子都是为了按行读取一个文本文件。</p>
<p>这两种方法之间的区别是用什么区构造BufferedReader。方法1使用 InputStreamReader，方法2使用有FileReader。这两者的区别是什么？</p>
<p>从Java DOC看，InputStreamReader是字节流到字符流的桥梁：它根据指定的字符集读取字节和解码为字符。InputStreamReader可以处理其他输入流，如网络连接，CLASSPATH资源，ZIP文件，等。</p>
<p>FileReader是读取字符文件的工具类。该类的构造函数假定默认的字符编码和默认的字节缓冲区的大小是合适的。FileReader 不允许你指定一个编码以外的其他平台的默认编码。因此，如果程序运行在不同的平台编码系统中，它就不是一个好的方式。</p>
<p>总之，InputStreamReader比FileReader是更安全的选择。</p>
<p>值得一提的，而不是使用/或\作为路径，你应该在不同的操作系统中总是使用File.separator可保证分隔符总是正确的。另外，所使用的路径应该是相对的，并且确保路径始终是正确的。</p>
<p>更新：</p>
<p>您还可以使用以下方法，这是自Java1.7。从本质上讲，它和方法1相同。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Charset charset = Charset.forName(<span class="string">"US-ASCII"</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="keyword">BufferedReader</span> reader = Files.newBufferedReader(file, charset)) &#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">line</span> = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">    System.err.format(<span class="string">"IOException: %s%n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>newBufferedReader方法如下:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">BufferedReader</span> newBufferedReader(Path path, Charset cs)&#123;</span><br><span class="line"> CharsetDecoder decoder = cs.newDecoder();</span><br><span class="line"> Reader reader = <span class="keyword">new</span> InputStreamReader(newInputStream(path), decoder);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(reader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>阅读类层次图也非常有助于理解那些InputStream和reader的相关概念: <a href="http://www.programcreek.com/2012/05/java-io-class-hierarchy-diagram/" target="_blank" rel="external">http://www.programcreek.com/2012/05/java-io-class-hierarchy-diagram/</a>.</p>
<p>引用: <a href="http://docs.oracle.com/javase/tutorial/essential/io/file.html" target="_blank" rel="external">http://docs.oracle.com/javase/tutorial/essential/io/file.html</a></p>
<p><a href="http://www.programcreek.com/2011/03/java-read-a-file-line-by-line-code-example/" target="_blank" rel="external">原文链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java I/O的总的类的数量很多，所以很容糊涂什么时候用哪一种。下面有两个方法介绍按行读取文件的操作。</p>
<h2 id="方法一：">方法一：</h2><figure class="highlight processing"><table><tr><td class]]>
    </summary>
    
      <category term="readLine" scheme="http://yoursite.com/tags/readLine/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Comparator vs Comparable]]></title>
    <link href="http://yoursite.com/2015/06/29/Comparator-vs-Comparable/"/>
    <id>http://yoursite.com/2015/06/29/Comparator-vs-Comparable/</id>
    <published>2015-06-29T15:44:28.000Z</published>
    <updated>2015-06-29T15:48:58.000Z</updated>
    <content type="html"><![CDATA[<p>Comparable 和 Comparator 是JAVA 核心API 提供的两个接口。从它们的名字我们可以得知它们是用来比较东西的在某种意义上说。但他们到底是什么，它们之间的区别是什么呢？以下是回答这个问题的2个例子。比较两个HDTV的尺寸简单的例子。在阅读代码后，如何使用Comparable vs. Comparator就比较容易了。</p>
<h2 id="1-Comparable">1.Comparable</h2><p>一个类实现Comparable接口，以便能够比较对象本身与一些其他对象。类本身必须实现此接口以便能够比较其实例（的）。所需实现的方法compareto()。这里就是一个例子：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> HDTV <span class="keyword">implements</span> Comparable&lt;HDTV&gt; &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br><span class="line">	<span class="keyword">private</span> String brand;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> HDTV(<span class="keyword">int</span> <span class="keyword">size</span>, String brand) &#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="keyword">size</span> = <span class="keyword">size</span>;</span><br><span class="line">		<span class="keyword">this</span>.brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getSize() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setSize(<span class="keyword">int</span> <span class="keyword">size</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="keyword">size</span> = <span class="keyword">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> String getBrand() &#123;</span><br><span class="line">		<span class="keyword">return</span> brand;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setBrand(String brand) &#123;</span><br><span class="line">		<span class="keyword">this</span>.brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">compareTo</span>(HDTV tv) &#123;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.getSize() &gt; tv.getSize())</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getSize() &lt; tv.getSize())</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		HDTV tv1 = <span class="keyword">new</span> HDTV(<span class="number">55</span>, <span class="string">"Samsung"</span>);</span><br><span class="line">		HDTV tv2 = <span class="keyword">new</span> HDTV(<span class="number">60</span>, <span class="string">"Sony"</span>);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span> (tv1.<span class="keyword">compareTo</span>(tv2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(tv1.getBrand() + <span class="string">" is better."</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(tv2.getBrand() + <span class="string">" is better."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Sony is better.</p>
</blockquote>
<h2 id="2-Comparator">2.Comparator</h2><p>在某些情况下，您可能不希望更改一个类，并使其具有可比较性。在这种情况下，如果你想比较基于某些属性/字段的对象，可以使用Comparator。例如，2个人可以基础上的身高或年龄等进行比较（Comparable不能被用于这种比较）。</p>
<p>需要实现的方法是compare()。现在让我们用另一种方式来比较这些电视的大小。比较器的一个常见用途是排序。集合和数组类提供了一种使用比较器的排序方法。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"> </span><br><span class="line">class HDTV &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> brand;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> HDTV(<span class="built_in">int</span> <span class="built_in">size</span>, <span class="keyword">String</span> brand) &#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">		<span class="keyword">this</span>.brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> getSize() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setSize(<span class="built_in">int</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getBrand() &#123;</span><br><span class="line">		<span class="keyword">return</span> brand;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setBrand(<span class="keyword">String</span> brand) &#123;</span><br><span class="line">		<span class="keyword">this</span>.brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class SizeComparator implements Comparator&lt;HDTV&gt; &#123;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> compare(HDTV tv1, HDTV tv2) &#123;</span><br><span class="line">		<span class="built_in">int</span> tv1Size = tv1.getSize();</span><br><span class="line">		<span class="built_in">int</span> tv2Size = tv2.getSize();</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">if</span> (tv1Size &gt; tv2Size) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tv1Size &lt; tv2Size) &#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> class Main &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		HDTV tv1 = <span class="keyword">new</span> HDTV(<span class="number">55</span>, <span class="string">"Samsung"</span>);</span><br><span class="line">		HDTV tv2 = <span class="keyword">new</span> HDTV(<span class="number">60</span>, <span class="string">"Sony"</span>);</span><br><span class="line">		HDTV tv3 = <span class="keyword">new</span> HDTV(<span class="number">42</span>, <span class="string">"Panasonic"</span>);</span><br><span class="line"> </span><br><span class="line">		ArrayList&lt;HDTV&gt; al = <span class="keyword">new</span> ArrayList&lt;HDTV&gt;();</span><br><span class="line">		al.<span class="built_in">add</span>(tv1);</span><br><span class="line">		al.<span class="built_in">add</span>(tv2);</span><br><span class="line">		al.<span class="built_in">add</span>(tv3);</span><br><span class="line"> </span><br><span class="line">		Collections.<span class="built_in">sort</span>(al, <span class="keyword">new</span> SizeComparator());</span><br><span class="line">		<span class="keyword">for</span> (HDTV a : al) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(a.getBrand());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Panasonic<br>Samsung<br>Sony</p>
</blockquote>
<p>我们经常会使用Collections.reverseorder()方法得到一个降序比较器。如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; <span class="keyword">al</span> = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">al</span>.<span class="built_in">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">al</span>.<span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">al</span>.<span class="built_in">add</span>(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="keyword">al</span>);</span><br><span class="line">Collections.<span class="built_in">sort</span>(<span class="keyword">al</span>);</span><br><span class="line">System.out.println(<span class="keyword">al</span>);</span><br><span class="line"> </span><br><span class="line">Comparator&lt;Integer&gt; comparator = Collections.reverseOrder();</span><br><span class="line">Collections.<span class="built_in">sort</span>(<span class="keyword">al</span>,comparator);</span><br><span class="line">System.out.println(<span class="keyword">al</span>);</span><br></pre></td></tr></table></figure>
<p><strong>Output:</strong></p>
<blockquote>
<p>[3,1,2]<br>[1,2,3]<br>[3,2,1]</p>
</blockquote>
<h2 id="3-什么时候使用？">3.什么时候使用？</h2><p>简单地说，一个类实现Comparable可以被比性，这意味着它的实例之间可以相互比较。<br>一个类实现Comparator将主要在两种情况下使用：1）它可以通过一个排序方法，如Collections.sort（）或Arrays.sort（），允许精确控制的排序顺序和2）它也可以被用来控制的顺序一定的数据结构，如有序集合（例如TreeSet）或排序图（例如，Treemap）。</p>
<p>例如，创建一个TreeSet。我们可以通过构造一个Comparator或使对象类可比较。</p>
<p>方法1——TreeSet（Comparator comparator）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">	Dog(<span class="keyword">int</span> s) &#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> d1.size - d2.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImpComparable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;Dog&gt; d = <span class="keyword">new</span> TreeSet&lt;Dog&gt;(<span class="keyword">new</span> SizeComparator()); <span class="comment">// pass comparator</span></span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">1</span>));</span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">2</span>));</span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方法2——实现Comparable接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">	Dog(<span class="keyword">int</span> s) &#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o.size - <span class="keyword">this</span>.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImpComparable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;Dog&gt; d = <span class="keyword">new</span> TreeSet&lt;Dog&gt;();</span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">1</span>));</span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">2</span>));</span><br><span class="line">		d.add(<span class="keyword">new</span> Dog(<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.programcreek.com/2011/12/examples-to-demonstrate-comparable-vs-comparator-in-java/" target="_blank" rel="external">原文链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Comparable 和 Comparator 是JAVA 核心API 提供的两个接口。从它们的名字我们可以得知它们是用来比较东西的在某种意义上说。但他们到底是什么，它们之间的区别是什么呢？以下是回答这个问题的2个例子。比较两个HDTV的尺寸简单的例子。在阅读代码后，如何使]]>
    </summary>
    
      <category term="Comparator" scheme="http://yoursite.com/tags/Comparator/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java中开发者如何排序]]></title>
    <link href="http://yoursite.com/2015/06/27/java%E4%B8%AD%E5%BC%80%E5%8F%91%E8%80%85%E5%A6%82%E4%BD%95%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2015/06/27/java中开发者如何排序/</id>
    <published>2015-06-27T15:24:05.000Z</published>
    <updated>2015-06-27T15:38:16.000Z</updated>
    <content type="html"><![CDATA[<p> 分析开源java项目的大量开源代码，我发现java开发者常用的排序方法有两种。一种是用Collections或者Arrays的sort()方法，另一种是用排好序的数据结构，例如TreeMap和TreeSet。</p>
<h2 id="使用sort()方法">使用sort()方法</h2><p>集合使用Collections.sort()方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Collections.sort</span></span><br><span class="line">List&lt;ObjectName&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;ObjectName&gt;();</span><br><span class="line">Collections.sort(<span class="built_in">list</span>,<span class="keyword">new</span> Comparator&lt;ObjectName&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ObjectName o1, ObjectName o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.toString().compareTo(o2.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>数组使用Arrays.sort()方法</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arrays.sort</span></span><br><span class="line">ObjectName[] arr = <span class="keyword">new</span> ObjectName[<span class="number">10</span>];</span><br><span class="line">Arrays.<span class="keyword">sort</span>(arr, <span class="keyword">new</span> Comparator&lt;ObjectName&gt;() &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> compare(ObjectName o1, ObjectName o2) &#123;</span><br><span class="line">		<span class="keyword">return</span> o1.toString().<span class="keyword">compareTo</span>(o2.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当集合或数据创建好了，这种方式非常简洁。</p>
<h2 id="使用排序好的数据结构">使用排序好的数据结构</h2><p>list或者set使用TreeSet排序<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreeSet</span></span><br><span class="line">Set&lt;ObjectName&gt; sortedSet = new TreeSet&lt;ObjectName&gt;<span class="params">(new Comparator&lt;ObjectName&gt;<span class="params">()</span> &#123;</span><br><span class="line">	public int compare<span class="params">(ObjectName o1, ObjectName o2)</span> &#123;</span><br><span class="line">		return o1.toString<span class="params">()</span>.compareTo<span class="params">(o2.toString<span class="params">()</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span>;</span><br><span class="line">sortedSet.addAll<span class="params">(unsortedSet)</span>;</span><br></pre></td></tr></table></figure></p>
<p>map使用TreeMap排序,TreeMap 根据key排序</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreeMap - using String.CASE_INSENSITIVE_ORDER which is a Comparator that orders Strings by compareToIgnoreCase</span></span><br><span class="line"><span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">Integer</span><span class="subst">&gt;</span> sortedMap <span class="subst">=</span> <span class="literal">new</span> TreeMap<span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">Integer</span><span class="subst">&gt;</span>(<span class="built_in">String</span><span class="built_in">.</span>CASE_INSENSITIVE_ORDER);</span><br><span class="line">sortedMap<span class="built_in">.</span>putAll(unsortedMap);</span><br></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TreeMap - In general, defined comparator</span></span><br><span class="line"><span class="built_in">Map</span>&lt;ObjectName, <span class="built_in">String</span>&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;ObjectName, <span class="built_in">String</span>&gt;(<span class="keyword">new</span> Comparator&lt;ObjectName&gt;() &#123;</span><br><span class="line">	public <span class="built_in">int</span> compare(ObjectName o1, ObjectName o2) &#123;</span><br><span class="line">		<span class="keyword">return</span> o1.toString().compareTo(o2.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">sortedMap.putAll(unsortedMap);</span><br></pre></td></tr></table></figure>
<p>这种方法是非常有用的,如果你想做很多关于集合的搜索操作。排序的数据结构的时间是复杂度O(logn),低于O(n)。</p>
<h2 id="不好的实例">不好的实例</h2><p>有很多不好的实例,比如使用自定义排序算法。以下面的代码为例,不仅算法不是有效的,而且它是不可读的。这种情况发生在不同形式的变化。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">double t;</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="number">2</span>; <span class="built_in">i</span>++)</span><br><span class="line">	<span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="built_in">j</span> &lt; <span class="number">3</span>; <span class="built_in">j</span>++)</span><br><span class="line">		<span class="keyword">if</span> (r<span class="matrix">[j]</span> &lt; r<span class="matrix">[i]</span>) <span class="cell">&#123;</span><br><span class="line">			t = r[i];</span><br><span class="line">			r[i] = r[j];</span><br><span class="line">			r[j] = t;</span><br><span class="line">		&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p> 分析开源java项目的大量开源代码，我发现java开发者常用的排序方法有两种。一种是用Collections或者Arrays的sort()方法，另一种是用排好序的数据结构，例如TreeMap和TreeSet。</p>
<h2 id="使用sort()方法">使用sort(]]>
    </summary>
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解Arrays.sort()数组排序]]></title>
    <link href="http://yoursite.com/2015/06/25/Java-%E6%AF%94%E8%BE%83%E5%99%A8/"/>
    <id>http://yoursite.com/2015/06/25/Java-比较器/</id>
    <published>2015-06-25T14:34:40.000Z</published>
    <updated>2015-06-25T14:36:12.000Z</updated>
    <content type="html"><![CDATA[<p>Arrays.sort(T[], Comparator &lt; ? super T &gt; c)是一个<strong>用户定义的对象</strong>数组的排序方法。</p>
<h3 id="1-_如何使用_Arrays-sort():_一个简单的例子">1. 如何使用 Arrays.sort(): 一个简单的例子</h3><p>通过阅读下面的示例，您可以快速了解如何正确地使用这个方法。这个比较器定义比较Dog类的大小<br>然后把这个比较器用作排序方法的一个参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Dog d: dogs)</span><br><span class="line">			System.out.print(d.size + <span class="string">" "</span> );</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Output:</strong></p>
<blockquote>
<p>2  1  3<br>1  2  3</p>
</blockquote>
<h3 id="2-_Arrays-sort()中使用策略模式">2.  Arrays.sort()中使用策略模式</h3><p> 这是一个策略模式的完美典范，值得在一提的是为什么策略模式适合这种情况。总之，策略模式在运行时选择不同的算法。在这种情况下，通过不同的比较器，选择不同的算法。基于上面的例子，假设现在你有另一个比较器，比较重量而不是狗的大小，你可以简单的创建一个新的比较器：如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">		size = s;</span><br><span class="line">		weight = w; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogWeightComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>, <span class="number">40</span>);</span><br><span class="line"> </span><br><span class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogWeightComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Dog d: dogs)</span><br><span class="line">			System.out.print(<span class="string">"size="</span>+d.size + <span class="string">" weight="</span> + d.weight + <span class="string">" "</span>);</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>size=2 weight=50 size=1 weight=30 size=3 weight=40<br>size=1 weight=30 size=2 weight=50 size=3 weight=40<br>size=1 weight=30 size=3 weight=40 size=2 weight=50 </p>
</blockquote>
<p>比较器是一个接口。任何实现此接口的比较器都可用于运行时。这是策略设计模式的核心思想。</p>
<h3 id="3-_为什么使用_“super”?">3. 为什么使用 “super”?</h3><p>简单来看，如果 “Comparator &lt; T &gt; c”作为一个参数，第二个参数是“Comparator&lt; ? super T &gt; c”。&lt; ? super T &gt;意味着这种类型可以是T或其超类。</p>
<p>为什么它允许super类型？答案是：这种方法允许所有子类使用相同的比较器。下面的例子中显而易见的。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"> </span><br><span class="line">class <span class="keyword">Animal</span>&#123;</span><br><span class="line">	int size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Dog extends <span class="keyword">Animal</span>&#123;</span><br><span class="line">	public Dog(int s)&#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Cat extends <span class="keyword">Animal</span>&#123;</span><br><span class="line">	public Cat(int s)&#123;</span><br><span class="line">		size  = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class AnimalSizeComparator implements Comparator&lt;<span class="keyword">Animal</span>&gt;&#123;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public int compare(<span class="keyword">Animal</span> o1, <span class="keyword">Animal</span> o2) &#123;</span><br><span class="line">		return o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">	//in this way, all sub classes <span class="keyword">of</span> <span class="keyword">Animal</span> can use this comparator.</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class ArraySort &#123;</span><br><span class="line"> </span><br><span class="line">	public static void main(String<span class="comment">[]</span> args) &#123;</span><br><span class="line">		Dog d1 = new Dog(2);</span><br><span class="line">		Dog d2 = new Dog(1);</span><br><span class="line">		Dog d3 = new Dog(3);</span><br><span class="line"> </span><br><span class="line">		Dog<span class="comment">[]</span> dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, new AnimalSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line"> </span><br><span class="line">		//when you have an array <span class="keyword">of</span> Cat, same Comparator can be used. </span><br><span class="line">		Cat c1 = new Cat(2);</span><br><span class="line">		Cat c2 = new Cat(1);</span><br><span class="line">		Cat c3 = new Cat(3);</span><br><span class="line"> </span><br><span class="line">		Cat<span class="comment">[]</span> catArray = &#123;c1, c2, c3&#125;;</span><br><span class="line">		printDogs(catArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(catArray, new AnimalSizeComparator());	</span><br><span class="line">		printDogs(catArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public static void printDogs(<span class="keyword">Animal</span><span class="comment">[]</span> animals)&#123;</span><br><span class="line">		for(<span class="keyword">Animal</span> a: animals)</span><br><span class="line">			System.out.print(<span class="string">"size="</span>+a.size + <span class="string">" "</span>);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>size=2 size=1 size=3<br>size=1 size=2 size=3 </p>
<p>size=2 size=1 size=3<br>size=1 size=2 size=3 </p>
</blockquote>
<h3 id="4-总结">4.总结</h3><p>总结，从Arrays.sort()学来的信息：</p>
<p>泛型-超类</p>
<p>策略模式</p>
<p>归并排序-  nlog（n）的时间复杂度</p>
<p><strong>Java.util.Collections#sort(List &lt; T &gt; list, Comparator &lt; ? super T &gt; c)</strong>与arrays.sort相似的想法。</p>
<h5 id="引用">引用</h5><p> <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort%28T[],%20java.util.Comparator%29" target="_blank" rel="external">Arrays.sort(T[], java.util.Comparator)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Arrays.sort(T[], Comparator &lt; ? super T &gt; c)是一个<strong>用户定义的对象</strong>数组的排序方法。</p>
<h3 id="1-_如何使用_Arrays-sort():_一个简单的例子">1. 如何使用]]>
    </summary>
    
      <category term="comparator" scheme="http://yoursite.com/tags/comparator/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中子类和父类的构造函数]]></title>
    <link href="http://yoursite.com/2015/06/25/Java%E4%B8%AD%E5%AD%90%E7%B1%BB%E5%92%8C%E7%88%B6%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2015/06/25/Java中子类和父类的构造函数/</id>
    <published>2015-06-24T16:06:29.000Z</published>
    <updated>2015-06-24T16:20:06.000Z</updated>
    <content type="html"><![CDATA[<p><strong>1. 为什么创建一个子类对象的时候也要调用父类的构造器？</strong></p>
<p>下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"Super"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打印结果：</p>
<blockquote>
<p>Super<br>Sub</p>
</blockquote>
<p>当子类继承一个父类，super()方法必须被子类的构造器调用，并且放在子类构造器中的首行。如果没有显式的调用super()方法，编译器将会在子类的构造器中插入super()方法。这就是创建一个子类对象的时候父类的构造器也被调用的原因。</p>
<p>这别不是创建两个对象，只创建了一个子类对象。之所以调用父类的构造器是因为父类可能有private修饰的属性需要被它的构造器初始化。</p>
<p>在编译器插入父类构造器后，子类构造器如下所示：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>();</span><br><span class="line">	System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. 一个常见的错误消息：隐式的父类构造函数没有定义默认的构造函数</strong></p>
<blockquote>
<p>隐式的父类构造函数没有定义默认的构造函数,必须定义一个显式的构造函数。</p>
</blockquote>
<p><img src="/avatar/Implicit-super-constructor-is-undefined-for-default-constructor.png" alt="Alt text"></p>
<p>这种编译错误发生的原因是默认的父类构造函数没有被定义。在Java中，如果一个类没有定义一个构造函数，编译器将会插入一个无参的构造函数作为该类的默认构造函数。如果一个父类定义一个构造函数，像这种Super(String s),编译器不会插入默认的无参的构造函数。</p>
<p>子类的构造函数中无论是有参数还是无参数的构造函数都将会调用父类无参的构造函数。由于编译器试图插入super()方法到子类的两个构造函数，但是父类并没有定义默认的构造函数，编译器会报告错误的消息。</p>
<p>要解决此问题，只有 1）在父类中添加一个父类默认的构造函数如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(<span class="string">"Super"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者2）移除父类自定义的构造函数，或者3）在子类的构造函数中添加 super（value）带参数的方法。</p>
<p><strong>3. 在子类的构造函数中显式的调用父类的构造函数</strong></p>
<p>下面的代码是正确的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">	String s;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.s = s;</span><br><span class="line">		System.out.println(<span class="string">"Super s"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Sub s = <span class="keyword">new</span> Sub(<span class="string">"a"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>子类的构造函数显式的调用了父类带参数的构造函数。父类的构造函数被定义，并且被成功的调用。</p>
<p><strong>4. 规则</strong></p>
<p>总之，规则是：子类的构造函数必须调用父类构造器，无论是通过程序员显式的或编译器隐式的调用。对于任何一种方式，被调用的父类构造函数必须被定义。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>1. 为什么创建一个子类对象的时候也要调用父类的构造器？</strong></p>
<p>下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="构造函数" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[字符串索引越界异常]]></title>
    <link href="http://yoursite.com/2015/06/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2015/06/24/字符串索引越界异常/</id>
    <published>2015-06-23T16:00:31.000Z</published>
    <updated>2015-06-23T16:18:18.000Z</updated>
    <content type="html"><![CDATA[<p><strong>java.lang.StringIndexOutOfBoundsException: String index out of range: -10</strong></p>
<p>查看日志看到这个返回异常消息时，也不知道问题出在哪里。后来想到有调用过String.subString()方法，当时在程序中截取字符串的时候把截取的位置写死了，以为传过来的被截字符串长度是固定的。后来传过来的值变小了，就出现了index 越界的情况。</p>
<p>解决方法:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先做判断字符串的长度，是否比截取的字符串长</span></span><br><span class="line"><span class="built_in">String</span> testStr = <span class="string">"justfortest"</span>;</span><br><span class="line"><span class="built_in">int</span> strLen = testStr.length();</span><br><span class="line"><span class="built_in">int</span> n = input;<span class="comment">//截取后几位的字符串</span></span><br><span class="line"><span class="keyword">if</span>(strLen &lt; n) &#123;</span><br><span class="line">  <span class="comment">//特殊处理</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> resultStr = testStr.subString(strLen - <span class="number">6</span>,strLen);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>java.lang.StringIndexOutOfBoundsException: String index out of range: -10</strong></p>
<p>查看日志看到这个返回异常消息时，也不知道问题出在哪里。后来想到有调用过Stri]]>
    </summary>
    
      <category term="StringIndexOutOfBoundsException" scheme="http://yoursite.com/tags/StringIndexOutOfBoundsException/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java.lang.Long cannot be cast to java.lang.Integer]]></title>
    <link href="http://yoursite.com/2015/06/23/java-Long-to-Integer/"/>
    <id>http://yoursite.com/2015/06/23/java-Long-to-Integer/</id>
    <published>2015-06-23T15:46:39.000Z</published>
    <updated>2015-06-23T15:53:18.000Z</updated>
    <content type="html"><![CDATA[<p>今天在做项目的时候，遇到的一个异常，逻辑里面抛出的。<br>具体原因是从数据库中查询出一个<strong>record</strong>，从这个记录中取出ID属性，由于在表中ID是自增的，查询出的结果竟然是<strong>Long</strong>类型，刚好我在程序中用int 类型的变量来接收Long类型的ID值，导致出现类型转换异常问题，解决方案：将Long类型转换成String，经过String转换成int类型即可。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">map</span>.get(<span class="string">"ID"</span>)从数据库中查询出的结果转换成<span class="keyword">map</span>对象</span><br><span class="line"><span class="typename">String</span> tmp = <span class="typename">String</span>.valueOf(<span class="keyword">map</span>.get(<span class="string">"ID"</span>);</span><br><span class="line">int id = <span class="typename">Integer</span>.parseInt(tmp);</span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在做项目的时候，遇到的一个异常，逻辑里面抛出的。<br>具体原因是从数据库中查询出一个<strong>record</strong>，从这个记录中取出ID属性，由于在表中ID是自增的，查询出的结果竟然是<strong>Long</strong>类型，刚好我在程序中用in]]>
    </summary>
    
      <category term="ClassCastException  Long  Integer" scheme="http://yoursite.com/tags/ClassCastException-Long-Integer/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015下半年读书清单]]></title>
    <link href="http://yoursite.com/2015/06/22/readingList/"/>
    <id>http://yoursite.com/2015/06/22/readingList/</id>
    <published>2015-06-22T02:45:18.000Z</published>
    <updated>2015-06-22T02:54:54.000Z</updated>
    <content type="html"><![CDATA[<p>前几天网上看到书店打折，心血来潮的就买了很多书，计划着下半年有时间一定要看完这些书，平时上班虽然很忙，但发现在学到的知识都是零乱的，为了能够系统的去学和增加阅读习惯，希望能多看看书，涨涨知识，趁着年轻多读点书。</p>
<ol>
<li>The Presentation Secrets Of Steve Jobs </li>
<li>Asking The Right Questions </li>
<li>Programming Pearls </li>
<li>Clean Code</li>
<li>Effective Java </li>
<li>Code Complete</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天网上看到书店打折，心血来潮的就买了很多书，计划着下半年有时间一定要看完这些书，平时上班虽然很忙，但发现在学到的知识都是零乱的，为了能够系统的去学和增加阅读习惯，希望能多看看书，涨涨知识，趁着年轻多读点书。</p>
<ol>
<li>The Presentation S]]>
    </summary>
    
      <category term="Reading List" scheme="http://yoursite.com/tags/Reading-List/"/>
    
      <category term="读书清单" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Simple Video]]></title>
    <link href="http://yoursite.com/2015/06/18/A-Simple-Video/"/>
    <id>http://yoursite.com/2015/06/18/A-Simple-Video/</id>
    <published>2015-06-18T15:06:17.000Z</published>
    <updated>2015-06-18T15:10:22.000Z</updated>
    <content type="html"><![CDATA[<video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm"><br>      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br></video>]]></content>
    <summary type="html">
    <![CDATA[<video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://medi]]>
    </summary>
    
      <category term="video" scheme="http://yoursite.com/tags/video/"/>
    
      <category term="Classical Fragment" scheme="http://yoursite.com/categories/Classical-Fragment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blog]]></title>
    <link href="http://yoursite.com/2015/06/18/firstblog/"/>
    <id>http://yoursite.com/2015/06/18/firstblog/</id>
    <published>2015-06-17T17:58:11.000Z</published>
    <updated>2015-06-17T18:02:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Talk_is_cheap,show_me_the_code-">Talk is cheap,show me the code.</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Talk_is_cheap,show_me_the_code-">Talk is cheap,show me the code.</h1>]]>
    </summary>
    
      <category term="first" scheme="http://yoursite.com/tags/first/"/>
    
      <category term="start" scheme="http://yoursite.com/categories/start/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/1940/10/24/hello-world/"/>
    <id>http://yoursite.com/1940/10/24/hello-world/</id>
    <published>1940-10-24T02:26:18.955Z</published>
    <updated>2015-06-17T18:03:10.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
      <category term="start" scheme="http://yoursite.com/categories/start/"/>
    
  </entry>
  
</feed>