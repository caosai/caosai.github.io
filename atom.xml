<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Courage Me]]></title>
  <subtitle><![CDATA[Talk is cheap,show me the code!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-06-24T16:20:06.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Cao Sai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java中子类和父类的构造函数]]></title>
    <link href="http://yoursite.com/2015/06/25/Java%E4%B8%AD%E5%AD%90%E7%B1%BB%E5%92%8C%E7%88%B6%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2015/06/25/Java中子类和父类的构造函数/</id>
    <published>2015-06-24T16:06:29.000Z</published>
    <updated>2015-06-24T16:20:06.000Z</updated>
    <content type="html"><![CDATA[<p><strong>1. 为什么创建一个子类对象的时候也要调用父类的构造器？</strong></p>
<p>下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"Super"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打印结果：</p>
<blockquote>
<p>Super<br>Sub</p>
</blockquote>
<p>当子类继承一个父类，super()方法必须被子类的构造器调用，并且放在子类构造器中的首行。如果没有显式的调用super()方法，编译器将会在子类的构造器中插入super()方法。这就是创建一个子类对象的时候父类的构造器也被调用的原因。</p>
<p>这别不是创建两个对象，只创建了一个子类对象。之所以调用父类的构造器是因为父类可能有private修饰的属性需要被它的构造器初始化。</p>
<p>在编译器插入父类构造器后，子类构造器如下所示：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>();</span><br><span class="line">	System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. 一个常见的错误消息：隐式的父类构造函数没有定义默认的构造函数</strong></p>
<blockquote>
<p>隐式的父类构造函数没有定义默认的构造函数,必须定义一个显式的构造函数。</p>
</blockquote>
<p><img src="/avatar/Implicit-super-constructor-is-undefined-for-default-constructor.png" alt="Alt text"></p>
<p>这种编译错误发生的原因是默认的父类构造函数没有被定义。在Java中，如果一个类没有定义一个构造函数，编译器将会插入一个无参的构造函数作为该类的默认构造函数。如果一个父类定义一个构造函数，像这种Super(String s),编译器不会插入默认的无参的构造函数。</p>
<p>子类的构造函数中无论是有参数还是无参数的构造函数都将会调用父类无参的构造函数。由于编译器试图插入super()方法到子类的两个构造函数，但是父类并没有定义默认的构造函数，编译器会报告错误的消息。</p>
<p>要解决此问题，只有 1）在父类中添加一个父类默认的构造函数如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(<span class="string">"Super"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者2）移除父类自定义的构造函数，或者3）在子类的构造函数中添加 super（value）带参数的方法。</p>
<p><strong>3. 在子类的构造函数中显式的调用父类的构造函数</strong></p>
<p>下面的代码是正确的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">	String s;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.s = s;</span><br><span class="line">		System.out.println(<span class="string">"Super s"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Sub s = <span class="keyword">new</span> Sub(<span class="string">"a"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>子类的构造函数显式的调用了父类带参数的构造函数。父类的构造函数被定义，并且被成功的调用。</p>
<p><strong>4. 规则</strong></p>
<p>总之，规则是：子类的构造函数必须调用父类构造器，无论是通过程序员显式的或编译器隐式的调用。对于任何一种方式，被调用的父类构造函数必须被定义。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>1. 为什么创建一个子类对象的时候也要调用父类的构造器？</strong></p>
<p>下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="构造函数" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="Simple Java" scheme="http://yoursite.com/categories/Simple-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[字符串索引越界异常]]></title>
    <link href="http://yoursite.com/2015/06/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2015/06/24/字符串索引越界异常/</id>
    <published>2015-06-23T16:00:31.000Z</published>
    <updated>2015-06-23T16:18:18.000Z</updated>
    <content type="html"><![CDATA[<p><strong>java.lang.StringIndexOutOfBoundsException: String index out of range: -10</strong></p>
<p>查看日志看到这个返回异常消息时，也不知道问题出在哪里。后来想到有调用过String.subString()方法，当时在程序中截取字符串的时候把截取的位置写死了，以为传过来的被截字符串长度是固定的。后来传过来的值变小了，就出现了index 越界的情况。</p>
<p>解决方法:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先做判断字符串的长度，是否比截取的字符串长</span></span><br><span class="line"><span class="built_in">String</span> testStr = <span class="string">"justfortest"</span>;</span><br><span class="line"><span class="built_in">int</span> strLen = testStr.length();</span><br><span class="line"><span class="built_in">int</span> n = input;<span class="comment">//截取后几位的字符串</span></span><br><span class="line"><span class="keyword">if</span>(strLen &lt; n) &#123;</span><br><span class="line">  <span class="comment">//特殊处理</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> resultStr = testStr.subString(strLen - <span class="number">6</span>,strLen);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>java.lang.StringIndexOutOfBoundsException: String index out of range: -10</strong></p>
<p>查看日志看到这个返回异常消息时，也不知道问题出在哪里。后来想到有调用过Stri]]>
    </summary>
    
      <category term="StringIndexOutOfBoundsException" scheme="http://yoursite.com/tags/StringIndexOutOfBoundsException/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java.lang.Long cannot be cast to java.lang.Integer]]></title>
    <link href="http://yoursite.com/2015/06/23/java-Long-to-Integer/"/>
    <id>http://yoursite.com/2015/06/23/java-Long-to-Integer/</id>
    <published>2015-06-23T15:46:39.000Z</published>
    <updated>2015-06-23T15:53:18.000Z</updated>
    <content type="html"><![CDATA[<p>今天在做项目的时候，遇到的一个异常，逻辑里面抛出的。<br>具体原因是从数据库中查询出一个<strong>record</strong>，从这个记录中取出ID属性，由于在表中ID是自增的，查询出的结果竟然是<strong>Long</strong>类型，刚好我在程序中用int 类型的变量来接收Long类型的ID值，导致出现类型转换异常问题，解决方案：将Long类型转换成String，经过String转换成int类型即可。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">map</span>.get(<span class="string">"ID"</span>)从数据库中查询出的结果转换成<span class="keyword">map</span>对象</span><br><span class="line"><span class="typename">String</span> tmp = <span class="typename">String</span>.valueOf(<span class="keyword">map</span>.get(<span class="string">"ID"</span>);</span><br><span class="line">int id = <span class="typename">Integer</span>.parseInt(tmp);</span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在做项目的时候，遇到的一个异常，逻辑里面抛出的。<br>具体原因是从数据库中查询出一个<strong>record</strong>，从这个记录中取出ID属性，由于在表中ID是自增的，查询出的结果竟然是<strong>Long</strong>类型，刚好我在程序中用in]]>
    </summary>
    
      <category term="ClassCastException  Long  Integer" scheme="http://yoursite.com/tags/ClassCastException-Long-Integer/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015下半年读书清单]]></title>
    <link href="http://yoursite.com/2015/06/22/readingList/"/>
    <id>http://yoursite.com/2015/06/22/readingList/</id>
    <published>2015-06-22T02:45:18.000Z</published>
    <updated>2015-06-22T02:54:54.000Z</updated>
    <content type="html"><![CDATA[<p>前几天网上看到书店打折，心血来潮的就买了很多书，计划着下半年有时间一定要看完这些书，平时上班虽然很忙，但发现在学到的知识都是零乱的，为了能够系统的去学和增加阅读习惯，希望能多看看书，涨涨知识，趁着年轻多读点书。</p>
<ol>
<li>The Presentation Secrets Of Steve Jobs </li>
<li>Asking The Right Questions </li>
<li>Programming Pearls </li>
<li>Clean Code</li>
<li>Effective Java </li>
<li>Code Complete</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天网上看到书店打折，心血来潮的就买了很多书，计划着下半年有时间一定要看完这些书，平时上班虽然很忙，但发现在学到的知识都是零乱的，为了能够系统的去学和增加阅读习惯，希望能多看看书，涨涨知识，趁着年轻多读点书。</p>
<ol>
<li>The Presentation S]]>
    </summary>
    
      <category term="Reading List" scheme="http://yoursite.com/tags/Reading-List/"/>
    
      <category term="读书清单" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Simple Video]]></title>
    <link href="http://yoursite.com/2015/06/18/A-Simple-Video/"/>
    <id>http://yoursite.com/2015/06/18/A-Simple-Video/</id>
    <published>2015-06-18T15:06:17.000Z</published>
    <updated>2015-06-18T15:10:22.000Z</updated>
    <content type="html"><![CDATA[<video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4"><br>      <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm"><br>      <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br></video>]]></content>
    <summary type="html">
    <![CDATA[<video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png"><br>      <source id="mp4" src="http://medi]]>
    </summary>
    
      <category term="video" scheme="http://yoursite.com/tags/video/"/>
    
      <category term="Classical Fragment" scheme="http://yoursite.com/categories/Classical-Fragment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blog]]></title>
    <link href="http://yoursite.com/2015/06/18/firstblog/"/>
    <id>http://yoursite.com/2015/06/18/firstblog/</id>
    <published>2015-06-17T17:58:11.000Z</published>
    <updated>2015-06-17T18:02:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Talk_is_cheap,show_me_the_code-">Talk is cheap,show me the code.</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Talk_is_cheap,show_me_the_code-">Talk is cheap,show me the code.</h1>]]>
    </summary>
    
      <category term="first" scheme="http://yoursite.com/tags/first/"/>
    
      <category term="start" scheme="http://yoursite.com/categories/start/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/1940/10/24/hello-world/"/>
    <id>http://yoursite.com/1940/10/24/hello-world/</id>
    <published>1940-10-24T02:26:18.955Z</published>
    <updated>2015-06-17T18:03:10.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
      <category term="start" scheme="http://yoursite.com/categories/start/"/>
    
  </entry>
  
</feed>